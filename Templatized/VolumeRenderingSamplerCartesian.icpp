/***********************************************************************
VolumeRenderingSamplerCartesian - Specialized volume rendering sampler
class for Cartesian data sets.
Copyright (c) 2009-2011 Oliver Kreylos

This file is part of the 3D Data Visualizer (Visualizer).

The 3D Data Visualizer is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

The 3D Data Visualizer is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with the 3D Data Visualizer; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
***********************************************************************/

#define VISUALIZATION_TEMPLATIZED_VOLUMERENDERINGSAMPLERCARTESIAN_IMPLEMENTATION

#include <Templatized/VolumeRenderingSamplerCartesian.h>

#include <Abstract/Algorithm.h>
#include <Templatized/Cartesian.h>
#include <Templatized/SlicedCartesian.h>

namespace Visualization {

namespace Templatized {

/**************************************************
Methods of class VolumeRenderingSampler<Cartesian>:
**************************************************/

template <class ScalarParam,class ValueParam>
inline
VolumeRenderingSampler<Cartesian<ScalarParam,3,ValueParam> >::VolumeRenderingSampler(
	const typename VolumeRenderingSampler<Cartesian<ScalarParam,3,ValueParam> >::DataSet& sDataSet)
	:dataSet(sDataSet)
	{
	/* Copy the original Cartesian volume size: */
	for(int i=0;i<3;++i)
		samplerSize[i]=(unsigned int)(dataSet.getNumVertices()[i]);
	}

template <class ScalarParam,class ValueParam>
template <class ScalarExtractorParam,class VoxelParam>
inline
void
VolumeRenderingSampler<Cartesian<ScalarParam,3,ValueParam> >::sample(
	const ScalarExtractorParam& scalarExtractor,
	typename ScalarExtractorParam::Scalar minValue,
	typename ScalarExtractorParam::Scalar maxValue,
	typename ScalarExtractorParam::Scalar outOfDomainValue,
	VoxelParam* voxels,
	const ptrdiff_t voxelStrides[3],
	Cluster::MulticastPipe* pipe,
	float percentageScale,
	float percentageOffset,
	Visualization::Abstract::Algorithm* algorithm) const
	{
	typedef VoxelParam Voxel;
	typedef typename ScalarExtractorParam::Scalar VScalar;
	
	/* Calculate the sample conversion factors: */
	VScalar sampleFactor=VScalar(255)/(maxValue-minValue);
	VScalar sampleOffset=VScalar(0.5)-minValue*VScalar(255)/(maxValue-minValue);
	
	typename DataSet::Index index;
	Voxel* vPtr0=voxels;
	for(index[0]=0;index[0]<dataSet.getNumVertices()[0];++index[0],vPtr0+=voxelStrides[0])
		{
		Voxel* vPtr1=vPtr0;
		for(index[1]=0;index[1]<dataSet.getNumVertices()[1];++index[1],vPtr1+=voxelStrides[1])
			{
			Voxel* vPtr2=vPtr1;
			for(index[2]=0;index[2]<dataSet.getNumVertices()[2];++index[2],vPtr2+=voxelStrides[2])
				{
				/* Get the vertex' scalar value: */
				VScalar value=scalarExtractor.getValue(dataSet.getVertexValue(index));
				
				/* Convert the value to unsigned char: */
				*vPtr2=Voxel(value*sampleFactor+sampleOffset);
				}
			}
		
		/* Update the busy dialog: */
		algorithm->callBusyFunction(float(index[0]+1)*percentageScale/float(dataSet.getNumVertices()[0])+percentageOffset);
		}
	}

/********************************************************
Methods of class VolumeRenderingSampler<SlicedCartesian>:
********************************************************/

template <class ScalarParam,class ValueScalarParam>
inline
VolumeRenderingSampler<SlicedCartesian<ScalarParam,3,ValueScalarParam> >::VolumeRenderingSampler(
	const typename VolumeRenderingSampler<SlicedCartesian<ScalarParam,3,ValueScalarParam> >::DataSet& sDataSet)
	:dataSet(sDataSet)
	{
	/* Copy the original Cartesian volume size: */
	for(int i=0;i<3;++i)
		samplerSize[i]=(unsigned int)(dataSet.getNumVertices()[i]);
	}

template <class ScalarParam,class ValueScalarParam>
template <class ScalarExtractorParam,class VoxelParam>
inline
void
VolumeRenderingSampler<SlicedCartesian<ScalarParam,3,ValueScalarParam> >::sample(
	const ScalarExtractorParam& scalarExtractor,
	typename ScalarExtractorParam::Scalar minValue,
	typename ScalarExtractorParam::Scalar maxValue,
	typename ScalarExtractorParam::Scalar outOfDomainValue,
	VoxelParam* voxels,
	const ptrdiff_t voxelStrides[3],
	Cluster::MulticastPipe* pipe,
	float percentageScale,
	float percentageOffset,
	Visualization::Abstract::Algorithm* algorithm) const
	{
	typedef VoxelParam Voxel;
	typedef typename ScalarExtractorParam::Scalar VScalar;
	
	/* Calculate the sample conversion factors: */
	VScalar sampleFactor=VScalar(255)/(maxValue-minValue);
	VScalar sampleOffset=VScalar(0.5)-minValue*VScalar(255)/(maxValue-minValue);
	
	typename DataSet::Index index;
	Voxel* vPtr0=voxels;
	ptrdiff_t linearIndex=0;
	for(index[0]=0;index[0]<dataSet.getNumVertices()[0];++index[0],vPtr0+=voxelStrides[0])
		{
		Voxel* vPtr1=vPtr0;
		for(index[1]=0;index[1]<dataSet.getNumVertices()[1];++index[1],vPtr1+=voxelStrides[1])
			{
			Voxel* vPtr2=vPtr1;
			for(index[2]=0;index[2]<dataSet.getNumVertices()[2];++index[2],vPtr2+=voxelStrides[2],++linearIndex)
				{
				/* Get the vertex' scalar value: */
				VScalar value=scalarExtractor.getValue(linearIndex);
				
				/* Convert the value to unsigned char: */
				*vPtr2=Voxel(value*sampleFactor+sampleOffset);
				}
			}
		
		/* Update the busy dialog: */
		algorithm->callBusyFunction(float(index[0]+1)*percentageScale/float(dataSet.getNumVertices()[0])+percentageOffset);
		}
	}

}

}
