/***********************************************************************
TripleChannelTripleChannelVolumeRenderer - Wrapper class for triple-channel volume
renderers as visualization elements.
Part of the wrapper layer of the templatized visualization
components.
Copyright (c) 2009-2011 Oliver Kreylos

This file is part of the 3D Data Visualizer (Visualizer).

The 3D Data Visualizer is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

The 3D Data Visualizer is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with the 3D Data Visualizer; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
***********************************************************************/

#define VISUALIZATION_WRAPPERS_TRIPLECHANNELVOLUMERENDERER_IMPLEMENTATION

#include <Wrappers/TripleChannelVolumeRenderer.h>

#include <stdio.h>
#include <Misc/ThrowStdErr.h>
#include <GLMotif/StyleSheet.h>
#include <GLMotif/WidgetManager.h>
#include <GLMotif/PopupWindow.h>
#include <GLMotif/RowColumn.h>
#include <GLMotif/Label.h>

#include <Templatized/VolumeRenderingSampler.h>
#include <Wrappers/TripleChannelVolumeRendererExtractor.h>

#include <TripleChannelRaycaster.h>

namespace Visualization {

namespace Wrappers {

/********************************************
Methods of class TripleChannelVolumeRenderer:
********************************************/

template <class DataSetWrapperParam>
inline
TripleChannelVolumeRenderer<DataSetWrapperParam>::TripleChannelVolumeRenderer(
	Visualization::Abstract::Algorithm* algorithm,
	Visualization::Abstract::Parameters* sParameters)
	:Visualization::Abstract::Element(sParameters),
	 raycaster(0)
	{
	for(int channel=0;channel<3;++channel)
		{
		channelEnabledToggles[channel]=0;
		transparencyGammaSliders[channel]=0;
		}
	
	/* Get proper pointers to the algorithm and parameter objects: */
	typedef TripleChannelVolumeRendererExtractor<DataSetWrapper> MyAlgorithm;
	typedef typename MyAlgorithm::Parameters MyParameters;
	MyAlgorithm* myAlgorithm=dynamic_cast<MyAlgorithm*>(algorithm);
	if(myAlgorithm==0)
		Misc::throwStdErr("TripleChannelVolumeRenderer: Mismatching algorithm object type");
	MyParameters* myParameters=dynamic_cast<MyParameters*>(getParameters());
	if(myParameters==0)
		Misc::throwStdErr("TripleChannelVolumeRenderer: Mismatching parameter object type");
	
	/* Check if all three scalar channels are from the same data set: */
	Visualization::Abstract::VariableManager* variableManager=algorithm->getVariableManager();
	const Visualization::Abstract::DataSet* dataSet=variableManager->getDataSetByScalarVariable(myParameters->scalarVariableIndices[0]);
	for(int channel=1;channel<3;++channel)
		if(variableManager->getDataSetByScalarVariable(myParameters->scalarVariableIndices[channel])!=dataSet)
			Misc::throwStdErr("TripleChannelVolumeRenderer: Mismatching scalar variables");
	
	/* Get a reference to the templatized data set: */
	const DataSetWrapper* myDataSet=dynamic_cast<const DataSetWrapper*>(dataSet);
	if(myDataSet==0)
		Misc::throwStdErr("TripleChannelVolumeRenderer: Mismatching data set type");
	const DS& ds=myDataSet->getDs();
	
	/* Create a volume rendering sampler: */
	Visualization::Templatized::VolumeRenderingSampler<DS> sampler(ds);
	
	/* Initialize the raycaster: */
	raycaster=new TripleChannelRaycaster(sampler.getSamplerSize(),ds.getDomainBox());
	
	/* Sample the three scalar channels: */
	for(int channel=0;channel<3;++channel)
		{
		/* Get a scalar extractor for the channel: */
		int svi=myParameters->scalarVariableIndices[channel];
		const ScalarExtractor* myScalarExtractor=dynamic_cast<const ScalarExtractor*>(variableManager->getScalarExtractor(svi));
		if(myScalarExtractor==0)
			Misc::throwStdErr("TripleChannelVolumeRenderer: Mismatching scalar extractor type");
		const SE& se=myScalarExtractor->getSe();
		
		/* Get the scalar value range: */
		typename SE::Scalar minValue=typename SE::Scalar(variableManager->getScalarValueRange(svi).first);
		typename SE::Scalar maxValue=typename SE::Scalar(variableManager->getScalarValueRange(svi).second);
		
		/* Sample the channel: */
		sampler.sample(se,minValue,maxValue,minValue,raycaster->getData(channel),raycaster->getDataStrides(),algorithm->getPipe(),100.0f/3.0f,100.0f*float(channel)/3.0f,algorithm);
		
		/* Set the channel's parameters: */
		raycaster->setChannelEnabled(channel,myParameters->channelEnableds[channel]);
		raycaster->setColorMap(channel,variableManager->getColorMap(svi));
		raycaster->setTransparencyGamma(channel,myParameters->transparencyGammas[channel]);
		}
	raycaster->updateData();
	
	/* Set the raycaster's step size: */
	raycaster->setStepSize(myParameters->sliceFactor);
	}

template <class DataSetWrapperParam>
inline
TripleChannelVolumeRenderer<DataSetWrapperParam>::~TripleChannelVolumeRenderer(
	void)
	{
	delete raycaster;
	}

template <class DataSetWrapperParam>
inline
GLMotif::Widget*
TripleChannelVolumeRenderer<DataSetWrapperParam>::createSettingsDialog(
	GLMotif::WidgetManager* widgetManager)
	{
	/* Get the style sheet: */
	const GLMotif::StyleSheet* ss=widgetManager->getStyleSheet();
	
	/* Create the settings dialog window: */
	GLMotif::PopupWindow* settingsDialogPopup=new GLMotif::PopupWindow("TripleChannelVolumeRendererSettingsDialogPopup",widgetManager,"Triple-Channel Volume Renderer Settings");
	settingsDialogPopup->setResizableFlags(true,false);
	
	GLMotif::RowColumn* settingsDialog=new GLMotif::RowColumn("SettingsDialog",settingsDialogPopup,false);
	settingsDialog->setNumMinorWidgets(2);
	
	/* Create a slider to change the slice factor: */
	new GLMotif::Label("SliceFactorLabel",settingsDialog,"Slice Factor");
	
	GLMotif::TextFieldSlider* sliceFactorSlider=new GLMotif::TextFieldSlider("SliceFactorSlider",settingsDialog,6,ss->fontHeight*10.0f);
	sliceFactorSlider->getTextField()->setFloatFormat(GLMotif::TextField::FIXED);
	sliceFactorSlider->getTextField()->setPrecision(3);
	sliceFactorSlider->setSliderMapping(GLMotif::TextFieldSlider::EXP10);
	sliceFactorSlider->setValueRange(0.1,10.0,0.1);
	sliceFactorSlider->setValue(raycaster->getStepSize());
	sliceFactorSlider->getValueChangedCallbacks().add(this,&TripleChannelVolumeRenderer::sliceFactorCallback);
	
	for(int channel=0;channel<3;++channel)
		{
		/* Create a toggle button to enable / disable the channel: */
		char name[40],label[20];
		snprintf(name,sizeof(name),"ChannelEnabledToggle%d",channel);
		snprintf(label,sizeof(label),"Channel %d",channel+1);
		channelEnabledToggles[channel]=new GLMotif::ToggleButton(name,settingsDialog,label);
		channelEnabledToggles[channel]->setToggleType(GLMotif::ToggleButton::TOGGLE_BUTTON);
		channelEnabledToggles[channel]->setToggle(raycaster->getChannelEnabled(channel));
		channelEnabledToggles[channel]->getValueChangedCallbacks().add(this,&TripleChannelVolumeRenderer::channelEnabledCallback);
		
		/* Create a slider to change the transparency gamma factor: */
		snprintf(name,sizeof(name),"TransparencyGammaSlider%d",channel);
		transparencyGammaSliders[channel]=new GLMotif::TextFieldSlider(name,settingsDialog,6,ss->fontHeight*10.0f);
		transparencyGammaSliders[channel]->getTextField()->setFloatFormat(GLMotif::TextField::FIXED);
		transparencyGammaSliders[channel]->getTextField()->setPrecision(3);
		transparencyGammaSliders[channel]->setSliderMapping(GLMotif::TextFieldSlider::EXP10);
		transparencyGammaSliders[channel]->setValueRange(0.1,10.0,0.1);
		transparencyGammaSliders[channel]->setValue(raycaster->getTransparencyGamma(channel));
		transparencyGammaSliders[channel]->getValueChangedCallbacks().add(this,&TripleChannelVolumeRenderer::transparencyGammaCallback);
		}
	
	settingsDialog->manageChild();
	
	return settingsDialogPopup;
	}

template <class DataSetWrapperParam>
inline
std::string
TripleChannelVolumeRenderer<DataSetWrapperParam>::getName(
	void) const
	{
	return "Triple-Channel Volume Renderer";
	}

template <class DataSetWrapperParam>
inline
size_t
TripleChannelVolumeRenderer<DataSetWrapperParam>::getSize(
	void) const
	{
	return size_t(raycaster->getDataSize(0)-1)*size_t(raycaster->getDataSize(1)-1)*size_t(raycaster->getDataSize(2)-1);
	}

template <class DataSetWrapperParam>
inline
void
TripleChannelVolumeRenderer<DataSetWrapperParam>::glRenderAction(
	GLContextData& contextData) const
	{
	/* Render the volume: */
	raycaster->glRenderAction(contextData);
	}

template <class DataSetWrapperParam>
inline
void
TripleChannelVolumeRenderer<DataSetWrapperParam>::sliceFactorCallback(
	GLMotif::TextFieldSlider::ValueChangedCallbackData* cbData)
	{
	/* Get proper pointer to the parameter object: */
	typename TripleChannelVolumeRendererExtractor<DataSetWrapper>::Parameters* myParameters=dynamic_cast<typename TripleChannelVolumeRendererExtractor<DataSetWrapper>::Parameters*>(getParameters());
	if(myParameters==0)
		Misc::throwStdErr("TripleChannelVolumeRenderer: Mismatching parameter object type");
	
	/* Change the slice factor: */
	Scalar sliceFactor=Scalar(cbData->value);
	myParameters->sliceFactor=sliceFactor;
	raycaster->setStepSize(sliceFactor);
	}

template <class DataSetWrapperParam>
inline
void
TripleChannelVolumeRenderer<DataSetWrapperParam>::channelEnabledCallback(
	GLMotif::ToggleButton::ValueChangedCallbackData* cbData)
	{
	/* Get proper pointer to the parameter object: */
	typename TripleChannelVolumeRendererExtractor<DataSetWrapper>::Parameters* myParameters=dynamic_cast<typename TripleChannelVolumeRendererExtractor<DataSetWrapper>::Parameters*>(getParameters());
	if(myParameters==0)
		Misc::throwStdErr("TripleChannelVolumeRenderer: Mismatching parameter object type");
	
	for(int channel=0;channel<3;++channel)
		if(cbData->toggle==channelEnabledToggles[channel])
			{
			/* Enable or disable the channel: */
			raycaster->setChannelEnabled(channel,cbData->set);
			}
	}

template <class DataSetWrapperParam>
inline
void
TripleChannelVolumeRenderer<DataSetWrapperParam>::transparencyGammaCallback(
	GLMotif::TextFieldSlider::ValueChangedCallbackData* cbData)
	{
	/* Get proper pointer to the parameter object: */
	typename TripleChannelVolumeRendererExtractor<DataSetWrapper>::Parameters* myParameters=dynamic_cast<typename TripleChannelVolumeRendererExtractor<DataSetWrapper>::Parameters*>(getParameters());
	if(myParameters==0)
		Misc::throwStdErr("TripleChannelVolumeRenderer: Mismatching parameter object type");
	
	/* Find the changed channel: */
	for(int channel=0;channel<3;++channel)
		if(cbData->slider==transparencyGammaSliders[channel])
			{
			/* Change the transparency gamma factor: */
			float transparencyGamma=float(cbData->value);
			myParameters->transparencyGammas[channel]=transparencyGamma;
			raycaster->setTransparencyGamma(channel,transparencyGamma);
			}
	}

}

}
