/***********************************************************************
GaleFEMVectorFile - Class to encapsulate operations on vector-valued
gridded files generated by the GALE simulation code.
Copyright (c) 2007 Oliver Kreylos

This file is part of the 3D Data Visualizer (Visualizer).

The 3D Data Visualizer is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

The 3D Data Visualizer is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with the 3D Data Visualizer; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
***********************************************************************/

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <Misc/ThrowStdErr.h>
#include <Misc/File.h>
#include <Misc/LargeFile.h>
#include <Plugins/FactoryManager.h>
#include <Math/Math.h>
#include <Geometry/Endianness.h>

#include <Concrete/GaleFEMVectorFile.h>

namespace Visualization {

namespace Concrete {

/**********************************
Methods of class GaleFEMVectorFile:
**********************************/

GaleFEMVectorFile::GaleFEMVectorFile(void)
	:BaseModule("GaleFEMVectorFile")
	{
	}

Visualization::Abstract::DataSet* GaleFEMVectorFile::load(const std::vector<std::string>& args,Comm::MulticastPipe* pipe) const
	{
	/* Open the data file: */
	Misc::File dataFile(args[0].c_str(),"rt");
	
	/* Create result data set: */
	DS::Index numVertices(33,33,33); // Hard-coded; there is no dimension field in the data file
	DataSet* result=new DataSet;
	result->getDs().setData(numVertices);
	
	/* Set the data value's name: */
	result->getDataValue().setVectorVariableName("Velocity");
	
	/* Read all vertex positions and values: */
	DS::Array& vertices=result->getDs().getVertices();
	char line[256];
	for(DS::Index index(0);index[0]<vertices.getSize(0);vertices.preInc(index))
		{
		DS::GridVertex& vertex=vertices(index);
		dataFile.gets(line,sizeof(line));
		int nodeIndex;
		if(sscanf(line,"%d %lf %lf %lf %lf %lf %lf",&nodeIndex,&vertex.pos[1],&vertex.pos[0],&vertex.pos[2],&vertex.value[1],&vertex.value[0],&vertex.value[2])!=7)
			Misc::throwStdErr("GaleFEMVectorFile::load: Error while reading data file %s",args[0].c_str());
		for(int i=0;i<3;++i)
			{
			vertex.pos[i]*=1.0e5;
			vertex.value[i]*=1.0e5;
			}
		// vertex.value[0]+=107.65;
		}
	
	/* Finalize the grid structure: */
	result->getDs().finalizeGrid();
	
	return result;
	}

}

}

/***************************
Plug-in interface functions:
***************************/

extern "C" Visualization::Abstract::Module* createFactory(Plugins::FactoryManager<Visualization::Abstract::Module>& manager)
	{
	/* Create module object and insert it into class hierarchy: */
	Visualization::Concrete::GaleFEMVectorFile* module=new Visualization::Concrete::GaleFEMVectorFile();
	
	/* Return module object: */
	return module;
	}

extern "C" void destroyFactory(Visualization::Abstract::Module* module)
	{
	delete module;
	}
